$(() => {
    let form,
        formMessages = $('#form-messages'),
        formSuccess = false;

    // If viewport is 820px and below, remove desktop .App__main
    // Simple workaround for bug of Mobile version form
    if ($(window).width() < 820) {
        $('body main.desktop').remove();
        form = $('.mobile__form');
    } else {
        $('body main.mobile').remove();
        form = $('.desktop__form')
    }

    // Form event listener
    $(form).on('submit', (e) => {
        e.preventDefault();

        // Serialize form data.
        let formData = $(form).serialize();

        // Submit form via AJAX
        $.ajax({
                type: 'POST',
                url: $(form).attr('action'),
                data: formData
            })

            // On successful request
            .done(() => {

                toastr.success('SUCCESS!');

                // Empty the form
                $('#fname', '#lname', '#gdpr', '#email').val('');

                console.log();

            })
            .fail((data) => {

                // Form message has the error class
               toastr.warning('Oops! Something went wrong');

                // Set message text
                data.responseText !== '' ? $(formMessages).text(data.responseText) : console.log('Oops! An error occured and your message could not be sent.');
            });
    });

    $("button.form__submit").on('click', () => {
        let formDataFilled = $('#fname').val().length > 0 && $('#lname').val().length > 0 && $('#email').val().length > 0 && $('#gdpr').is(":checked");
        console.log("this: ", $(this));
        console.log('formDataFilled: ' + formDataFilled)
        if (formDataFilled == true) {
            formSuccess = true;
            setTimeout(() => {
                if (formSuccess === true) {
                    console.log('Hooray!');
                }
            }, 1500);
        }
    });

});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQoKCkgPT4ge1xyXG4gICAgbGV0IGZvcm0sXHJcbiAgICAgICAgZm9ybU1lc3NhZ2VzID0gJCgnI2Zvcm0tbWVzc2FnZXMnKSxcclxuICAgICAgICBmb3JtU3VjY2VzcyA9IGZhbHNlO1xyXG5cclxuICAgIC8vIElmIHZpZXdwb3J0IGlzIDgyMHB4IGFuZCBiZWxvdywgcmVtb3ZlIGRlc2t0b3AgLkFwcF9fbWFpblxyXG4gICAgLy8gU2ltcGxlIHdvcmthcm91bmQgZm9yIGJ1ZyBvZiBNb2JpbGUgdmVyc2lvbiBmb3JtXHJcbiAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA4MjApIHtcclxuICAgICAgICAkKCdib2R5IG1haW4uZGVza3RvcCcpLnJlbW92ZSgpO1xyXG4gICAgICAgIGZvcm0gPSAkKCcubW9iaWxlX19mb3JtJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgICQoJ2JvZHkgbWFpbi5tb2JpbGUnKS5yZW1vdmUoKTtcclxuICAgICAgICBmb3JtID0gJCgnLmRlc2t0b3BfX2Zvcm0nKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvcm0gZXZlbnQgbGlzdGVuZXJcclxuICAgICQoZm9ybSkub24oJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyBTZXJpYWxpemUgZm9ybSBkYXRhLlxyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9ICQoZm9ybSkuc2VyaWFsaXplKCk7XHJcblxyXG4gICAgICAgIC8vIFN1Ym1pdCBmb3JtIHZpYSBBSkFYXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIHVybDogJChmb3JtKS5hdHRyKCdhY3Rpb24nKSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAvLyBPbiBzdWNjZXNzZnVsIHJlcXVlc3RcclxuICAgICAgICAgICAgLmRvbmUoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKCdTVUNDRVNTIScpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVtcHR5IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkKCcjZm5hbWUnLCAnI2xuYW1lJywgJyNnZHByJywgJyNlbWFpbCcpLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coKTtcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5mYWlsKChkYXRhKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRm9ybSBtZXNzYWdlIGhhcyB0aGUgZXJyb3IgY2xhc3NcclxuICAgICAgICAgICAgICAgdG9hc3RyLndhcm5pbmcoJ09vcHMhIFNvbWV0aGluZyB3ZW50IHdyb25nJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2V0IG1lc3NhZ2UgdGV4dFxyXG4gICAgICAgICAgICAgICAgZGF0YS5yZXNwb25zZVRleHQgIT09ICcnID8gJChmb3JtTWVzc2FnZXMpLnRleHQoZGF0YS5yZXNwb25zZVRleHQpIDogY29uc29sZS5sb2coJ09vcHMhIEFuIGVycm9yIG9jY3VyZWQgYW5kIHlvdXIgbWVzc2FnZSBjb3VsZCBub3QgYmUgc2VudC4nKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKFwiYnV0dG9uLmZvcm1fX3N1Ym1pdFwiKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGZvcm1EYXRhRmlsbGVkID0gJCgnI2ZuYW1lJykudmFsKCkubGVuZ3RoID4gMCAmJiAkKCcjbG5hbWUnKS52YWwoKS5sZW5ndGggPiAwICYmICQoJyNlbWFpbCcpLnZhbCgpLmxlbmd0aCA+IDAgJiYgJCgnI2dkcHInKS5pcyhcIjpjaGVja2VkXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhpczogXCIsICQodGhpcykpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmb3JtRGF0YUZpbGxlZDogJyArIGZvcm1EYXRhRmlsbGVkKVxyXG4gICAgICAgIGlmIChmb3JtRGF0YUZpbGxlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGZvcm1TdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybVN1Y2Nlc3MgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSG9vcmF5IScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAxNTAwKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbn0pO1xyXG4iXX0=
